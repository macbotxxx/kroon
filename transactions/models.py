from datetime import timezone
from datetime import timedelta, datetime
from django.utils import timezone
from django.db import models
from kroon.users.models import User, UserBankDetails
from django.utils.translation import gettext_lazy as _
from helpers.common.basemodel import BaseModel
from django.core.files import File
from PIL import Image, ImageDraw


import secrets
# import qrcode
# import qrcode.image.svg
from io import BytesIO

TRANSACTION_STATUS = (
        ('pending', _('Pending')),
        ('sent', _('Sent')),
        ('cancelled', _('Cancelled')),
        ('declined', _('Declined')),
        ('rejected', _('Rejected/Refused')), 
        ('received', _('Received')), 
        ('successful', _('Successful')),
        ('processing', _('Processing')),
        ('failed', _('failed')),
    )



class Transactions (BaseModel):
    """
    model list of transactions that currently took place 
    """

    user = models.ForeignKey(
        User,
        verbose_name=_("User Profile"),
        on_delete=models.CASCADE, related_name='user_transactions',
        null =True,blank=True,
        help_text=_("The user for whom account belongs to")
    )

    benefactor = models.ForeignKey(
        User,
        verbose_name=_("Benefactor Profile"),
        on_delete=models.CASCADE,
        related_name="trans_benefactor",
        null =True, blank=True,
        help_text=_("The benefactor profile that sends the money")
    )
    
    recipient = models.ForeignKey(
        User,
        verbose_name=_("Recipient Profile"),
        on_delete=models.CASCADE,
        related_name="trans_reciever",
        null =True, blank=True,
        help_text=_("The user profiles which recieves the transaction")
    )

    # saving the transactional reference here 
    transactional_id = models.CharField(
        verbose_name= _("Transactional ID"),
        null=True, max_length=355,
        editable=False,
        help_text = _("Transaction identifier that belongs to the customer")
    )

    flw_ref = models.CharField(
        verbose_name= _("Third Party Ref"),
        null=True, max_length=355,
        editable=False, blank=True,
        help_text = _("the theird party ref is the transactional ref which is generated by kroon topup thrid party.")
    )

    # having the amount both on kroon and user local currency
    # note this hold the amount credited and debited as well 
    amount = models.DecimalField(
        verbose_name = _("Amount In Kroon Token"),
        null=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("transactional amount taken by the customer.")
    )

    amount_in_localcurrency = models.DecimalField(
        verbose_name = _("Amount In Local Currency"),
        null=True, blank=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("transactional amount taken by the customer.")
    )

    currency =  models.CharField (
        verbose_name = _("Kroon Currency"),
        max_length = 300, 
        null=True,
        help_text=_("Transactional currency message that was taken by the customer.")
    )

    local_currency =  models.CharField (
        verbose_name = _("User Local Currency"),
        max_length = 300, 
        null=True,
        help_text=_("Transactional currency message that was taken by the customer.")
    )

    amount_settled = models.DecimalField(
        verbose_name = _("Amount Settled"),
        null=True, blank=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("the final amount settled by the third providers , note this takes place when they have reducted their trasaction charges.")
    )

    debited_kroon_amount = models.DecimalField(
        verbose_name = _("Debited Amount"),
        null=True, blank=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("debited amount taken by the customer.")
    )

    credited_kroon_amount = models.DecimalField(
        verbose_name = _("Credited Amount"),
        null=True, blank=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("created amount taken by the customer.")
    )

    kroon_balance =  models.DecimalField(
        verbose_name = _("Kroon Balance"),
        null=True, blank=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("the remaining kroon balance amount taken for the customer.")
    )

    payment_type = models.CharField (
        verbose_name = _("Payment Type"),
        max_length = 300, 
        null=True,blank=True,
        help_text=_("the payment type which will be provided by the third party after the transaction has been approved.")
    )

    narration = models.CharField (
        verbose_name = _("Transaction Message"),
        max_length = 300, 
        null=True,
        help_text=_("Transactions message that was taken by the customer.")
    )

    device_fingerprint = models.CharField (
        verbose_name = _("Device Fingerprint"),
        max_length = 300, 
        null=True, blank=True,
        help_text=_("the device finger print will be provided by kroon third party , note this is an optional field")
    )

    transactional_date = models.DateTimeField (
        verbose_name = _("Transactional Date"),
        null=True, blank=True,
        help_text=_("the transactional date which holds the date the transaction was taken by our thrid party providers.")
    )

    ip_address = models.GenericIPAddressField(
        verbose_name = _("IP Address"),
        null=True, blank=True,
        help_text=_("the ip address of the user when initiated the transaction , note this will be provided by the thrid party providers.")
    )

    # card details for the transaction charge
    # note ... this is only saved if the user made a card transaction

    card = models.BooleanField(
        verbose_name = _("Card Transaction Status"),
        null=True, blank=True,
        default=False,
        help_text=_("this indicates whether the transaction is been paid using card, if so the card details will be saved.")
    )

    card_first_6digits = models.IntegerField(
        verbose_name = _("Card First 6 digits"),
        null=True, blank=True,
        help_text=_("the fields store the user card first 6 digits used for the transaction charge.")
    )

    card_last_4digits = models.IntegerField(
        verbose_name = _("Card Last 4 digits"),
        null=True, blank=True,
        help_text=_("the fields store the user card last 4 digits used for the transaction charge.")
    )

    card_issuer = models.CharField(
        verbose_name = _("Card Issuer"),
        max_length = 300,
        null=True,blank=True,
        help_text=_("the fields store the user card issuer , for easy identification.")
    )

    card_country = models.CharField(
        verbose_name = _("Card Country"),
        null=True, blank=True,
        max_length = 50,
        help_text=_("this shows the country in which the user card is been provided from or issued to the user.")
    )

    card_type = models.CharField(
        verbose_name = _("Card Type"),
        max_length = 300,
        null=True, blank=True,
        help_text=_("this shows the type of card which the user used for this current transaction.")
    )

    card_expiry = models.CharField(
        verbose_name = _("Card Expiry"),
        max_length = 300,
        null=True, blank=True,
        help_text = _("the expiring date of the user card will be store here.")
    )

    # billing information which will be provided by the third party
    # this stores the billing user information such as name , number , address etc
    
    billing_id = models.CharField(
        verbose_name = _("Billing ID"),
        max_length =255,
        null =True,
        blank =True,
        help_text=_("this is the identication number which for the current transaction.")
    )

    billing_name = models.CharField(
        verbose_name = _("Billing Name"),
        max_length= 255,
        null = True , blank=True,
        help_text=_("this stores the billing name of the customer, note this is the full name")
    )

    billing_mobile_number = models.CharField(
        verbose_name = _("Billing Mobile number"),
        max_length= 255,
        null = True , blank=True,
        help_text=_("this stores the billing mobile Number of the customer")
    )

    billing_email = models.EmailField(
        verbose_name = _("Billing Email"),
        max_length= 255,
        null = True , blank=True,
        help_text=_("this stores the billing email of the customer")
    )

    billing_date = models.DateTimeField(
        verbose_name = _("Billing Date And Time"),
        max_length= 255,
        null = True , blank=True,
        help_text=_("this stores the billing date and time of the customer during the transaction")
    )

    service_providers = models.CharField(
        verbose_name = _("Service Provider"),
        max_length= 255,
        null = True , blank=True,
        help_text=_("this stores the Service Provider of which the customer used while making payment")
    )


    action = models.CharField(
        verbose_name = _("Action"),
        max_length = 300,
        null=True, 
        help_text=_("action status for the current transaction.")
    )

    status = models.CharField(
        choices = TRANSACTION_STATUS,
        verbose_name = _("Transaction Status"),
        default='pending', max_length = 20,
        null=True,
        help_text=_("action status for the current transaction, which determines if it successful or not.")
    )


    def __str__(self):
        return str(self.user)

    class Meta:
        ordering = ['-created_date']
        verbose_name = _("All Transactions")
        verbose_name_plural = _("All Transactions")
        


class KroonTokenTransfer (BaseModel):

    transactional_id = models.CharField(
        verbose_name= _("Transactional ID"),
        null=True, max_length=255,
        editable=False,
        help_text = _("Transaction identifier that belongs to the customer")
    )

    sender = models.ForeignKey(
        User,
        verbose_name=_("Sender Profile"),
        on_delete=models.CASCADE,
        help_text=_("The user that is currently sending kroon token.")
    ) 

    recipient = models.ForeignKey(
        User,
        verbose_name=_("Recipient Profile"),
        on_delete=models.CASCADE,
        related_name="reciever",
        help_text=_("The user for whom account belongs to")
    )

    kroon_token = models.DecimalField(
        verbose_name = _("Amount In Kroon Token"),
        null=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("transactional amount taken by the customer.")
    )

    action = models.CharField(
        verbose_name = _("Action"),
         max_length = 300, default="TOKEN TRANSFER",
        null=True,editable=False,
        help_text=_("action status for the current transaction.")
    )

    status = models.BooleanField(
        verbose_name = _("Transaction Status"),
        null = True, default=False,
        help_text = _("transactional status which determines whether the transaction was successful or not .")
    ) 

    def __str__(self):
        return str(self.sender)

    class Meta:
        ordering = ('-created_date',)
        verbose_name = _("All Kroon Token Transfer")
        verbose_name_plural = _("All Kroon Token Transfer")


class KroonTokenRequest (BaseModel):
    """
    this section hold the functions of open kroon token transfer and fast check out for merchants 
    """
    recipient = models.ForeignKey(
        User,
        verbose_name=_("Recipient User Profile"),
        on_delete=models.CASCADE,null =True,
        help_text=_("The user for whom account belongs to")
    )

    sender = models.ForeignKey(
        User,
        verbose_name=_("Sender User Profile"),
        on_delete=models.CASCADE,
        related_name="sender",
        null=True,blank=True,
        help_text=_("The user for whom account belongs to")
    )

    transactional_id = models.CharField(
        verbose_name= _("Transactional ID"),
        null=True, max_length=50,
        editable=False,
        help_text = _("Transaction identifier that belongs to the customer")
    )

    amount_in_kroon_token = models.DecimalField(
        verbose_name = _("Amount In Kroon Token"),
        null=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("transactional amount taken by the customer.")
    )

    wallet_id = models.CharField(
        verbose_name= _("Wallet ID"),
        max_length=9,
        null=True, editable=False,
        help_text=_("Wallet ID that belongs to the customer, requesting a transaction")
        )

    # kroon_token_qrcode = models.ImageField(
    #     verbose_name = _("Kroon Token QR Code"),
    #     upload_to = 'token_barcode/',
    #     null=True,blank=True,
    #     help_text=_("Token qrcode is been generated from the customer token request.")
    #     )

    action = models.CharField(
        verbose_name = _("Action"),
        max_length = 300, default="OPEN KROON REQUEST",
        null=True,editable=False,
        help_text=_("action status for the current transaction.")
    )

    status = models.CharField(
        choices = TRANSACTION_STATUS,
        verbose_name = _("Transaction Status"),
        default='pending', max_length = 20,
        null=True,
        help_text=_("action status for the current transaction, which determines if it successful or not.")
    )

    def __str__(self):
        return str(self.recipient)

    # def save(self, *args, **kwargs):
    #     if self.status == 'received':
    #         super().save(*args, **kwargs)
    #     else:
    #         url = f'127.0.0.1:8000/api/v1/{self.wallet_id}/{self.amount_in_kroon_token}/{self.transactional_id}/'
    #         qrcode_img = qrcode.make(url)
    #         canvas = Image.new('RGB', (450, 450), 'white')
    #         draw = ImageDraw.Draw(canvas)
    #         canvas.paste(qrcode_img)
    #         fname = f'{self.recipient}-request-token-qrcode.png'
    #         buffer = BytesIO()
    #         canvas.save(buffer, 'PNG')
    #         self.kroon_token_qrcode.save(fname, File(buffer), save=False)
    #         canvas.close()
    #         super().save(*args, **kwargs)

    class Meta:
        ordering = ('-created_date',)
        verbose_name = _("Token Request")
        verbose_name_plural = _("Token Request")



class TransactionalPin (BaseModel):
    user = models.ForeignKey(
        User,
        verbose_name=_("User Profile"),
        on_delete=models.CASCADE,
        help_text=_("The user for whom account belongs to")
    )

    password = models.CharField(
        verbose_name = _("Transactional Pin"), 
        max_length=500,
        null=True,
         help_text=_("this input holds the user transaction pin which is been hased")
    )

    def __str__(self):
        return str(self.user)

    class Meta:
        ordering = ('-created_date',)
        verbose_name = _("Users Transactional Pin")
        verbose_name_plural = _("Users Transactional Pin")


class UserRequestToken(BaseModel):
    recipient = models.ForeignKey(
        User,
        verbose_name=_("Request User Profile"),
        on_delete=models.CASCADE,null =True,
        help_text=_("The user for whom account belongs to")
    )

    sender = models.ForeignKey(
        User,
        verbose_name=_("Sender User Profile"),
        on_delete=models.CASCADE,
        related_name="kroon_sender",
        null=True,blank=True,
        help_text=_("The user for whom account belongs to")
    )

    transactional_id = models.CharField(
        verbose_name= _("Transactional ID"),
        null=True, max_length=255,
        help_text = _("Transaction identifier that belongs to the customer")
    )

    amount_in_kroon_token = models.DecimalField(
        verbose_name = _("Amount In Kroon Token"),
        null=True, blank=True,
        max_digits = 300, decimal_places = 2,
        default=0.00,
        help_text=_("transactional amount taken by the customer.")
    )

    wallet_id = models.CharField(
        verbose_name= _("Wallet ID"),
        max_length=9,
        null=True, 
        help_text=_("Wallet ID that belongs to the customer, requesting a transaction")
        )

    action = models.CharField(
        verbose_name = _("Action"),
        default='KROON REQUEST', max_length = 20,
        null=True, editable = False,
        help_text=_("action status for the current transaction.")
    )

    status = models.CharField(
        choices = TRANSACTION_STATUS,
        verbose_name = _("Transaction Status"),
        default='pending', max_length = 20,
        null=True,
        help_text=_("action status for the current transaction, which determines if it successful or not.")
    )

    accepted_status = models.BooleanField(
        verbose_name = _("Accepted Status"),
        default=False, null =True,
        blank=True,
        help_text=_("this is hold the status bar that determines if the transaction was accepted or not.")
    )

    def __str__(self):
        return str(self.recipient)

    class Meta:
        ordering = ('-created_date',)
        verbose_name = _("Users Kroon Transfer")
        verbose_name_plural = _("Users Kroon Transfer")







